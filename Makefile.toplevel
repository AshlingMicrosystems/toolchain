# NOTE: This makefile is intended to run from the top level directory, NOT the
# toolchain directory where it is stored

# Image names used for docker images built here
IMAGENAME?=buffaloimage
TESTIMAGENAME?=buffaloimagetest

# Calculate User ID for running scripts in Docker container
UID:=$(shell id -u)

# Version of Python for Windows build
PYTHONVERS:=3.10.5

.PHONY: all build build-qemu smoketestprep smoke regression

all:
	@echo "Please specify a build target"
	@false

windows-package:
	@echo "Checking environment..."
	@test $(PACKAGE) || (echo "Please specify package name. Usage: make $@ PACKAGE="; false)
	@test $(DOCDIR) || (echo "Please specify PDF documentation directory. Usage: make $@ DOCDIR="; false)
	@test -f $(DOCDIR)/gdb.pdf || (echo "Unable to find PDF documentation in \"$(DOCDIR)\"."; false)
	@test -f toolchain/Makefile.toplevel || (echo "Unable to find this makefile?"; false)
	@test -d binutils || (echo "Unable to find binutils directory!"; false)
	@test -d gcc || (echo "Unable to find gcc directory!"; false)
	@test -d gdb || (echo "Unable to find gdb directory!"; false)
	@test -d newlib || (echo "Unable to find newlib directory!"; false)
	@test -d picolibc || (echo "Unable to find picolibc directory!"; false)
	@test -d gmp-6.2.1 || (echo "Unable to find gmp-6.2.1 directory!"; false)
	@test -d libexpat || (echo "Unable to find libexpat directory!"; false)
	@test -f python/python-$(PYTHONVERS).tar.xz || (echo "Unable to find python source!"; false)
	@test -f python/python-$(PYTHONVERS)-embed-amd64.zip || (echo "Unable to find python binary!"; false)
	rm -rf python/Python-$(PYTHONVERS) python/python-$(PYTHONVERS)-combined
	cd python && tar xf python-$(PYTHONVERS).tar.xz
	@# Create a combined python folder we can use for building GDB
	mkdir -p python/python-$(PYTHONVERS)-combined/libs
	cd python/python-$(PYTHONVERS)-combined && unzip -q ../python-$(PYTHONVERS)-embed-amd64.zip
	cd python/python-$(PYTHONVERS)-combined/libs && unzip -q ../../python-$(PYTHONVERS)-embed-amd64.zip
	cp -rf python/Python-$(PYTHONVERS)/Include python/python-$(PYTHONVERS)-combined/Include
	cp python/Python-$(PYTHONVERS)/PC/pyconfig.h python/python-$(PYTHONVERS)-combined/Include
	@# Now do the build
	rm -rf build install install-combined install-newlib install-picolibc
	./toolchain/build-all-full-windows.sh
	find install-combined -name '*.dll.a' -exec rm {} \;
	find install-newlib -name '*.dll.a' -exec rm {} \;
	find install-picolibc -name '*.dll.a' -exec rm {} \;
	cd install-combined && ../toolchain/extract-ucrt-dlls.sh
	cd install-newlib && ../toolchain/extract-ucrt-dlls.sh
	cd install-picolibc && ../toolchain/extract-ucrt-dlls.sh
	cd install-combined/bin && unzip -q ../../python/python-$(PYTHONVERS)-embed-amd64.zip
	cd install-newlib/bin && unzip -q ../../python/python-$(PYTHONVERS)-embed-amd64.zip
	cd install-picolibc/bin && unzip -q ../../python/python-$(PYTHONVERS)-embed-amd64.zip
	cd install-combined/bin && rm -f python.exe pythonw.exe
	cd install-newlib/bin && rm -f python.exe pythonw.exe
	cd install-picolibc/bin && rm -f python.exe pythonw.exe
	mkdir -p install-combined/share/doc install-combined/share/doc/gcc
	mkdir -p install-newlib/share/doc install-newlib/share/doc/gcc
	mkdir -p install-picolibc/share/doc install-picolibc/share/doc/gcc
	cp -r $(DOCDIR)/*.pdf install-combined/share/doc/
	cp -r $(DOCDIR)/*.pdf install-newlib/share/doc/
	cp -r $(DOCDIR)/*.pdf install-picolibc/share/doc/
	cp -r $(DOCDIR)/gcc/*.pdf install-combined/share/doc/gcc/
	cp -r $(DOCDIR)/gcc/*.pdf install-newlib/share/doc/gcc/
	cp -r $(DOCDIR)/gcc/*.pdf install-picolibc/share/doc/gcc/
	mv install-combined $(PACKAGE)
	zip -9r $(PACKAGE).zip $(PACKAGE)
	mv $(PACKAGE) install-combined
	mv install-newlib $(PACKAGE)
	zip -9r $(PACKAGE)-newlib.zip $(PACKAGE)
	mv $(PACKAGE) install-newlib
	mv install-picolibc $(PACKAGE)
	zip -9r $(PACKAGE)-picolibc.zip $(PACKAGE)
	mv $(PACKAGE) install-picolibc

linux-package:
	@# Check environment before running
	@echo "Checking environment..."
	@test $(PACKAGE) || (echo "Please specify package name. Usage: make $@ PACKAGE="; false)
	@test -f toolchain/Makefile.toplevel || (echo "Unable to find this makefile?"; false)
	@test -d binutils || (echo "Unable to find binutils directory!"; false)
	@test -d gcc || (echo "Unable to find gcc directory!"; false)
	@test -d gdb || (echo "Unable to find gdb directory!"; false)
	@test -d newlib || (echo "Unable to find newlib directory!"; false)
	@test -d picolibc || (echo "Unable to find picolibc directory!"; false)
	@test -d cpython || (echo "Unable to find cpython directory!"; false)
	@test -d gmp-6.2.1 || (echo "Unable to find gmp-6.2.1 directory!"; false)
	@test -d libexpat || (echo "Unable to find libexpat directory!"; false)
	@test -d libffi || (echo "Unable to find libffi directory!"; false)
	@test -f libffi/configure || (echo "libffi autogen.sh not run?"; false)
	@test -d openssl || (echo "Unable to find openssl directory!"; false)
	@test -d sqlite || (echo "Unable to find sqlite directory!"; false)
	@test -d zlib || (echo "Unable to find zlib directory!"; false)
	$(MAKE) -f $(firstword $(MAKEFILE_LIST)) build-full
	rm -f install-combined/bin/2to3* install-combined/bin/idle3* install-combined/bin/pip3* install-combined/bin/pydoc3* install-combined/bin/python3*
	rm -f install-newlib/bin/2to3* install-newlib/bin/idle3* install-newlib/bin/pip3* install-newlib/bin/pydoc3* install-newlib/bin/python3*
	rm -f install-picolibc/bin/2to3* install-picolibc/bin/idle3* install-picolibc/bin/pip3* install-picolibc/bin/pydoc3* install-picolibc/bin/python3*
	tar cf $(PACKAGE).tar --transform 's/^install-combined/$(PACKAGE)/' install-combined
	tar cf $(PACKAGE)-newlib.tar --transform 's/^install-newlib/$(PACKAGE)/' install-newlib
	tar cf $(PACKAGE)-picolibc.tar --transform 's/^install-picolibc/$(PACKAGE)/' install-picolibc
	xz -9ev $(PACKAGE).tar
	xz -9ev $(PACKAGE)-newlib.tar
	xz -9ev $(PACKAGE)-combined.tar

build:
	rm -rf build install
	docker build -t $(IMAGENAME) -f toolchain/Dockerfile-build toolchain
	docker run --rm -t -i -u $(UID):$(UID) -v $(PWD):/build -w /build/toolchain $(IMAGENAME) ./build-all.sh --clean
	cd install && find . -type f -exec ldd {} \; 2>&1 | grep -v 'not a dynamic executable' | sed 's/(.*//' | sort | uniq

	@# Do some testing on some platforms where I can
	$(MAKE) -f $(firstword $(MAKEFILE_LIST)) smoketestprep
	$(MAKE) -f $(firstword $(MAKEFILE_LIST)) smoke IMAGE=centos:centos7 OUT=centos7
	$(MAKE) -f $(firstword $(MAKEFILE_LIST)) smoke IMAGE=centos:centos8 OUT=centos8
	$(MAKE) -f $(firstword $(MAKEFILE_LIST)) smoke IMAGE=ubuntu:16.04 OUT=ubuntu1604
	$(MAKE) -f $(firstword $(MAKEFILE_LIST)) smoke IMAGE=ubuntu:18.04 OUT=ubuntu1804
	$(MAKE) -f $(firstword $(MAKEFILE_LIST)) smoke IMAGE=ubuntu:20.04 OUT=ubuntu2004

build-full:
	rm -rf build install install-combined install-newlib install-picolibc
	docker build -t $(IMAGENAME) -f toolchain/Dockerfile-full-linux toolchain
	docker run --rm -t -i -u $(UID):$(UID) -v $(PWD):/build -w /build/toolchain $(IMAGENAME) ./build-all-full-linux.sh --clean
	cd install-combined && find . -type f -exec ldd {} \; 2>&1 | grep -v 'not a dynamic executable' | sed 's/(.*//' | sort | uniq

	@# Do some testing on some platforms where I can
	$(MAKE) -f $(firstword $(MAKEFILE_LIST)) smoketestprep
	$(MAKE) -f $(firstword $(MAKEFILE_LIST)) smoke IMAGE=centos:centos7 OUT=centos7
	$(MAKE) -f $(firstword $(MAKEFILE_LIST)) smoke IMAGE=centos:centos8 OUT=centos8
	$(MAKE) -f $(firstword $(MAKEFILE_LIST)) smoke IMAGE=ubuntu:16.04 OUT=ubuntu1604
	$(MAKE) -f $(firstword $(MAKEFILE_LIST)) smoke IMAGE=ubuntu:18.04 OUT=ubuntu1804
	$(MAKE) -f $(firstword $(MAKEFILE_LIST)) smoke IMAGE=ubuntu:20.04 OUT=ubuntu2004

build-qemu:
	rm -rf build-qemu install-qemu
	mkdir build-qemu
	docker build -t $(TESTIMAGENAME) -f toolchain/Dockerfile-regression toolchain
	docker run --rm -t -i -u $(UID):$(UID) -v $(PWD):$(PWD) -w $(PWD)/build-qemu $(TESTIMAGENAME) $(PWD)/qemu/configure --target-list=riscv32-linux-user,riscv64-linux-user --prefix=$(PWD)/install-qemu
	docker run --rm -t -i -u $(UID):$(UID) -v $(PWD):$(PWD) -w $(PWD)/build-qemu $(TESTIMAGENAME) make -j $(shell nproc)
	docker run --rm -t -i -u $(UID):$(UID) -v $(PWD):$(PWD) -w $(PWD)/build-qemu $(TESTIMAGENAME) make install

smoketestprep:
	rm -rf smoketest
	mkdir -p smoketest
	echo 'int main(void){return 0;}' > smoketest/test.c
	mkdir -p smoketest/dis
	cp toolchain/smoketest-disassemble/* smoketest/dis

smoke:
	docker run --rm -t -i -u$(UID):$(UID) -v $(PWD)/install-combined:/toolchain:ro -v $(PWD)/smoketest:/smoketest -w /smoketest $(IMAGE) /toolchain/bin/riscv32-unknown-elf-gcc -Os -flto test.c -o $(OUT).out
	docker run --rm -t -i -u$(UID):$(UID) -v $(PWD)/install-combined:/toolchain:ro -v $(PWD)/smoketest:/smoketest -w /smoketest $(IMAGE) /toolchain/bin/riscv32-unknown-elf-gcc --specs=nano.specs -Os -flto test.c -o $(OUT).out
	docker run --rm -t -i -u$(UID):$(UID) -v $(PWD)/install-combined:/toolchain:ro -v $(PWD)/smoketest:/smoketest -w /smoketest $(IMAGE) /toolchain/bin/riscv32-unknown-elf-gcc --specs=picolibc.specs --oslib=semihost -Os -flto test.c -o $(OUT).out
	docker run --rm -t -i -u$(UID):$(UID) -v $(PWD)/install-combined:/toolchain:ro -v $(PWD)/smoketest:/smoketest -w /smoketest $(IMAGE) /toolchain/bin/riscv32-unknown-elf-gdb --version

smokefull:
	docker run --rm -t -i -u$(UID):$(UID) -v $(PWD)/install:/toolchain:ro -v $(PWD)/smoketest:/smoketest -w /smoketest $(IMAGE) /toolchain/bin/riscv32-unknown-elf-gcc -Os -flto test.c -o $(OUT).out
	docker run --rm -t -i -u$(UID):$(UID) -v $(PWD)/install:/toolchain:ro -v $(PWD)/smoketest:/smoketest -w /smoketest $(IMAGE) /toolchain/bin/riscv32-unknown-elf-gcc --specs=nano.specs -Os -flto test.c -o $(OUT).out
	docker run --rm -t -i -u$(UID):$(UID) -v $(PWD)/install:/toolchain:ro -v $(PWD)/smoketest:/smoketest -w /smoketest $(IMAGE) /toolchain/bin/riscv32-unknown-elf-gcc --specs=picolibc.specs --oslib=semihost -Os -flto test.c -o $(OUT).out
	docker run --rm -t -i -u$(UID):$(UID) -v $(PWD)/install:/toolchain:ro -v $(PWD)/smoketest:/smoketest -w /smoketest $(IMAGE) /toolchain/bin/riscv32-unknown-elf-gdb --version
	docker run --rm -t -i -u$(UID):$(UID) -v $(PWD)/install:/toolchain:ro -v $(PWD)/smoketest:/smoketest -w /smoketest $(IMAGE) /toolchain/bin/python3 --version
	docker run --rm -t -i -u$(UID):$(UID) -v $(PWD)/install:/toolchain:ro -v $(PWD)/smoketest:/smoketest -w /smoketest/dis $(IMAGE) /toolchain/bin/riscv32-unknown-elf-gcc -march=rv32ic test.c -o a.out
	docker run --rm -t -i -u$(UID):$(UID) -v $(PWD)/install:/toolchain:ro -v $(PWD)/smoketest:/smoketest -w /smoketest/dis $(IMAGE) /toolchain/bin/riscv32-unknown-elf-gdb -x expattest.gdb
	docker run --rm -t -i -u$(UID):$(UID) -v $(PWD)/install:/toolchain:ro -v $(PWD)/smoketest:/smoketest -w /smoketest/dis $(IMAGE) /toolchain/bin/riscv32-unknown-elf-gdb -x test.gdb

regression:
	docker build -t $(TESTIMAGENAME) -f toolchain/Dockerfile-regression toolchain
	mkdir -p $(PWD)/toolchain/tmp
	#docker run --rm -t -i -u$(UID):$(UID) -v $(PWD)/install:/toolchain:ro -v $(PWD)/install-qemu:/q:ro -v $(PWD)/gcc:/gcc-src:ro -v $(PWD)/toolchain:/t -w /t/tmp -e DEJAGNU=/t/site-docker.exp -e USER=demo $(TESTIMAGENAME) runtest --tool=gcc --target_board='riscv32-sim/-march=rv32ima/-mabi=ilp32' 2>&1 | tee testing.log
	#docker run --rm -t -i -u$(UID):$(UID) -v $(PWD)/install:/toolchain:ro -v $(PWD)/install-qemu:/q:ro -v $(PWD)/gcc:/gcc-src:ro -v $(PWD)/toolchain:/t -w /t/tmp -e DEJAGNU=/t/site-docker.exp -e USER=demo $(TESTIMAGENAME) runtest --tool=g++ --target_board='riscv32-sim/-march=rv32ima/-mabi=ilp32' 2>&1 | tee testingg++.log
	docker run --rm -t -i -u$(UID):$(UID) -v $(PWD)/install:/toolchain:ro -v $(PWD)/install-qemu:/q:ro -v $(PWD)/gcc:/gcc-src:ro -v $(PWD)/toolchain:/t -w /t/tmp -e DEJAGNU=/t/site-docker.exp -e USER=demo $(TESTIMAGENAME) runtest --tool=gcc --target_board='riscv32-sim/-march=rv32ia/-mabi=ilp32 riscv32-sim/-march=rv32ima/-mabi=ilp32 riscv64-sim/-march=rv64ima/-mabi=lp64 riscv64-sim/-march=rv64imaf/-mabi=lp64 riscv64-sim/-march=rv64imaf/-mabi=lp64f riscv32-sim/-march=rv32ia/-mabi=ilp32/--specs=nano.specs riscv32-sim/-march=rv32ima/-mabi=ilp32/--specs=nano.specs riscv64-sim/-march=rv64ima/-mabi=lp64/--specs=nano.specs riscv64-sim/-march=rv64imaf/-mabi=lp64/--specs=nano.specs riscv64-sim/-march=rv64imaf/-mabi=lp64f/--specs=nano.specs riscv32-sim/-march=rv32ia/-mabi=ilp32/--specs=picolibc.specs/--oslib=semihost riscv32-sim/-march=rv32ima/-mabi=ilp32/--specs=picolibc.specs/--oslib=semihost riscv64-sim/-march=rv64ima/-mabi=lp64/--specs=picolibc.specs/--oslib=semihost riscv64-sim/-march=rv64imaf/-mabi=lp64/--specs=picolibc.specs/--oslib=semihost riscv64-sim/-march=rv64imaf/-mabi=lp64f/--specs=picolibc.specs/--oslib=semihost' 2>&1 | tee testing.log
	docker run --rm -t -i -u$(UID):$(UID) -v $(PWD)/install:/toolchain:ro -v $(PWD)/install-qemu:/q:ro -v $(PWD)/gcc:/gcc-src:ro -v $(PWD)/toolchain:/t -w /t/tmp -e DEJAGNU=/t/site-docker.exp -e USER=demo $(TESTIMAGENAME) runtest --tool=g++ --target_board='riscv32-sim/-march=rv32ia/-mabi=ilp32 riscv32-sim/-march=rv32ima/-mabi=ilp32 riscv64-sim/-march=rv64ima/-mabi=lp64 riscv64-sim/-march=rv64imaf/-mabi=lp64 riscv64-sim/-march=rv64imaf/-mabi=lp64f riscv32-sim/-march=rv32ia/-mabi=ilp32/--specs=nano.specs riscv32-sim/-march=rv32ima/-mabi=ilp32/--specs=nano.specs riscv64-sim/-march=rv64ima/-mabi=lp64/--specs=nano.specs riscv64-sim/-march=rv64imaf/-mabi=lp64/--specs=nano.specs riscv64-sim/-march=rv64imaf/-mabi=lp64f/--specs=nano.specs riscv32-sim/-march=rv32ia/-mabi=ilp32/--specs=picolibc.specs/--oslib=semihost riscv32-sim/-march=rv32ima/-mabi=ilp32/--specs=picolibc.specs/--oslib=semihost riscv64-sim/-march=rv64ima/-mabi=lp64/--specs=picolibc.specs/--oslib=semihost riscv64-sim/-march=rv64imaf/-mabi=lp64/--specs=picolibc.specs/--oslib=semihost riscv64-sim/-march=rv64imaf/-mabi=lp64f/--specs=picolibc.specs/--oslib=semihost' 2>&1 | tee testingcxx.log
